import { db, storage } from '../config/firebase';
import { addDoc, collection, updateDoc, getDocs, where, query} from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";

export const saveServer = async (
  payload: { ip: string; title: string; description: string; imageFile?: File | null, userId:string }
): Promise<any> => {
  try {
    // Reference to the "servers" collection where we'll add the new server document
    const serversCollectionRef = collection(db, "servers");

    // Create the server data object
    const serverData:any = {
      ip: payload.ip,
      title: payload.title,
      description: payload.description,
      userId: payload.userId,  // Link to the user creating the server
      createdAt: new Date(),
      imageUrl: null
    }

    // Save the server data to Firestore using addDoc, Firestore will auto-generate the ID
    const serverRef = await addDoc(serversCollectionRef, serverData);

    // Now, get the server ID (auto-generated by Firestore)
    const serverId = serverRef.id;

    // If there's an image file, upload it to Firebase Storage
    if (payload.imageFile) {
      const fileName = `server-banner-${serverId}.${payload.imageFile.type.split('/')[1]}`;
      const imageRef = ref(storage, `serversImg/${serverId}/${fileName}`);
      
      // Upload the banner image to Firebase Storage
      await uploadBytes(imageRef, payload.imageFile);

      // Get the image URL after uploading
      const imageUrl = await getDownloadURL(imageRef);

      await updateDoc(serverRef, { imageUrl });


      serverData.imageUrl = imageUrl;
    }

    return { ...serverData};
  } catch (error) {
    console.error("Error saving server: ", error);
    throw error; // Propagate the error to the caller
  }
};

export const getServersByUserId = async (userId: string): Promise<any[]> => {
    try {
      // Reference to the "servers" collection
      const serversCollectionRef = collection(db, "servers");
  
      // Create a query to filter servers by userId
      const q = query(serversCollectionRef, where("userId", "==", userId));
  
      // Fetch the documents matching the query
      const querySnapshot = await getDocs(q);
  
      // Create an array to store the server data
      const servers: any[] = [];
  
      // Loop through the documents and extract the data
      querySnapshot.forEach((doc) => {
        servers.push({ id: doc.id, ...doc.data() });
      });
  
      // Return the list of servers
      return servers;
    } catch (error) {
      console.error("Error fetching servers by userId: ", error);
      throw error; // Propagate the error to the caller
    }
  };